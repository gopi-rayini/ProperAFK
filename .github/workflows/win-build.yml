name: Win EXE
on:
  push:
    branches: [ "dev" , "main"]

jobs:
  build:
    runs-on: windows-latest
    env:
      NODE_VERSION: '20.16.0'
      PYTHON_VERSION: '3.10'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Detect project dir
        id: detect
        shell: powershell
        run: |
          $pkg = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -File -Filter package.json | Select-Object -First 1
          if (-not $pkg) { throw 'package.json not found' }
          $dir = Split-Path $pkg.FullName -Parent
          "WD=$dir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Npcap SDK
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $urls = @(
            'https://nmap.org/npcap/dist/npcap-sdk-1.13.zip',
            'https://nmap.org/npcap/dist/npcap-sdk-1.12.zip'
          )
          $zip = "$env:RUNNER_TEMP\npcap.zip"
          $dst = Join-Path $env:RUNNER_TEMP 'npcap'
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          $ok = $false
          foreach ($u in $urls) {
            try {
              Invoke-WebRequest -Uri $u -OutFile $zip -Headers @{ 'User-Agent'='Mozilla/5.0' }
              Expand-Archive -Path $zip -DestinationPath $dst -Force
              $ok = $true; break
            } catch { if (Test-Path $zip) { Remove-Item $zip -Force } }
          }
          if (-not $ok) { throw 'Download failed' }
          $files = Get-ChildItem -Path $dst -Recurse -File -Filter pcap.h
          $root = $null
          foreach ($f in $files) {
            $inc = Split-Path $f.FullName -Parent
            if ($inc -match '\\Include(\\pcap)?$') { $root = Split-Path $inc -Parent; break }
          }
          if (-not $root) { throw 'Npcap SDK not found' }
          $lib64 = Join-Path $root 'Lib\x64'
          if (Test-Path $lib64) { $lib = $lib64 } else { $lib = Join-Path $root 'Lib' }
          Add-Content -Path $env:GITHUB_ENV -Value ("NPCAP_SDK_ROOT={0}" -f $root)
          Add-Content -Path $env:GITHUB_ENV -Value ("INCLUDE={0}\Include;{1}" -f $root,$env:INCLUDE)
          Add-Content -Path $env:GITHUB_ENV -Value ("LIB={0};{1}" -f $lib,$env:LIB)

      - name: Configure node-gyp env
        run: echo ok
        env:
          npm_config_msvs_version: '2022'
          npm_config_python: ${{ steps.py.outputs.python-path }}

      - name: Install deps
        working-directory: ${{ env.WD }}
        run: npm install --no-audit --no-fund
      - name: Ensure Windows icon (256x256 .ico)
        shell: powershell
        working-directory: ${{ env.WD }}
        run: |
          $ErrorActionPreference='Stop'
          # Install ImageMagick
          choco install imagemagick -y --no-progress
          refreshenv | Out-Null

          # Pick a source PNG if present, else create one
          $srcs = @('public\icon.png','icon.png','assets\icon.png')
          $src = $null
          foreach($s in $srcs){ if(Test-Path $s){ $src = $s; break } }
          if(-not $src){
            magick -size 256x256 canvas:none -fill "#0B6E4F" -draw "roundrectangle 0,0 255,255 48,48" `
                   -fill white -gravity center -pointsize 88 -annotate 0 "B" icon-256.png
          } else {
            magick convert "$src" -resize 256x256 -background none -gravity center -extent 256x256 icon-256.png
          }

          # Build multi-size ICO and place at project root
          magick convert icon-256.png -define icon:auto-resize=256,128,64,48,32,16 icon.ico

          if(-not (Test-Path "icon.ico")){ throw "icon.ico not created" }

      - name: Build EXE
        working-directory: ${{ env.WD }}
        run: npm run dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bpsr-meter-win
          path: |
            ${{ env.WD }}/dist/**/*.exe
            ${{ env.WD }}/dist/win-unpacked/**
