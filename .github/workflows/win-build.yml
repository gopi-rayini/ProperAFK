
name: Win EXE
on:
  push:
    branches: [ "dev" , "main"]
jobs:
  build:
    runs-on: windows-latest
    env:
      NODE_VERSION: '20.16.0'
      PYTHON_VERSION: '3.10'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python for node-gyp
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Npcap SDK (robust)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $urls = @(
            'https://nmap.org/npcap/dist/npcap-sdk-1.13.zip',
            'https://nmap.org/npcap/dist/npcap-sdk-1.12.zip'
          )
          $zip = "$env:RUNNER_TEMP\npcap.zip"
          $dst = Join-Path $env:RUNNER_TEMP 'npcap'
          New-Item -ItemType Directory -Force -Path $dst | Out-Null

          $downloaded = $false
          foreach ($u in $urls) {
            try {
              Write-Host "Downloading $u"
              Invoke-WebRequest -Uri $u -OutFile $zip -Headers @{ 'User-Agent'='Mozilla/5.0' }
              Expand-Archive -Path $zip -DestinationPath $dst -Force
              $downloaded = $true
              break
            } catch {
              if (Test-Path $zip) { Remove-Item $zip -Force }
              Write-Host "Attempt failed: $($_.Exception.Message)"
            }
          }
          if (-not $downloaded) { throw 'Download failed' }

          # find root folder by locating pcap.h under Include
          $files = Get-ChildItem -Path $dst -Recurse -File -Filter pcap.h
          $root = $null
          foreach ($f in $files) {
            $inc = Split-Path $f.FullName -Parent
            if ($inc -match '\\Include(\\pcap)?$') {
              $root = Split-Path $inc -Parent
              break
            }
          }
          if (-not $root) {
            Write-Host 'Listing extracted files:'
            Get-ChildItem $dst -Recurse | Select-Object FullName
            throw 'Npcap SDK not found'
          }

          $lib64 = Join-Path $root 'Lib\x64'
          if (Test-Path $lib64) { $lib = $lib64 } else { $lib = Join-Path $root 'Lib' }

          Add-Content -Path $env:GITHUB_ENV -Value "NPCAP_SDK_ROOT=$root"
          Add-Content -Path $env:GITHUB_ENV -Value "INCLUDE=$root\Include;$env:INCLUDE"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$lib;$env:LIB"

      - name: Configure node-gyp env
        # prefer env vars over npm config on npm 10
        run: echo ok
        env:
          npm_config_msvs_version: '2022'
          npm_config_python: ${{ steps.py.outputs.python-path }}

      - name: Install deps
        run: npm ci

      - name: Build EXE
        run: npm run dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bpsr-meter-win
          path: |
            dist/**/*.exe
            dist/win-unpacked/**
